@model Best_BabySitter.Models.Advert

@{
    ViewBag.Title = "ManageAdvert";
    Layout = "~/Views/Shared/_ParentLayout.cshtml";
}

<div class="manage-adverts-container" style="display:flex">
    @{
        List<Best_BabySitter.Models.Advert> list = ViewData["openAdverts"] as List<Best_BabySitter.Models.Advert>;
        int pos = 0;
        <div class="manage-adverts-container-item open-advert-board">
            <h4>OPEN ADVERTS</h4>
            <div class=" dashboard-event-adverts">
                @{
                    int count = 0;
                    foreach (var ad in list)
                    {
                       
                        //Model.ID = ad.ID;Model.NumKids = ad.NumKids; Model.Specification = ad.Specification;Model.StartDate = ad.StartDate;
                        <div class="event-advert" onclick="@{pos = count;} ">
                            <Label class="advert-id">#AD|@ad.ID</Label>
                            <Label class="advert-date">@String.Format("{0:MM/dd/yyyy}", ad.StartDate)</Label><br />
                            <Label class="advert-time">@String.Format("{0:HH:mm}", ad.StartTime)- @String.Format("{0:HH:mm}", ad.EndTime)</Label>
                            <div class="advert-info">
                                <span class=" advert-icon fa fa-calendar-alt"></span>
                                <Label>@ad.Street , @ad.City</Label>
                            </div>
                        </div>
                     count++;
                    }
                }

            </div>
        </div>
        <div class="manage-adverts-container-item manage-advert-board">
            <div class="manage-advert">
                <p class="manage-advert-btn">
                    <a class="manage-advert-nav edit-advert-btn">
                        ADVERT
                    </a>
                    <a class="manage-advert-nav manage-advert-responses-btn">
                        RESPONSES
                    </a>
                </p>
                <div class="edit-advert-container">
                    @using (Html.BeginForm())
                    {
                        
                        @Html.AntiForgeryToken()
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        <Label class="container-header">INFORMATION</Label>
                        <hr />
                        <div class="container-block">
                            <p>
                                @Html.LabelFor(model => list[pos].NumKids, htmlAttributes: new { @class = "container-label" })
                                @Html.EditorFor(model => list[pos].NumKids, new { htmlAttributes = new { @class = "" } })
                                @Html.ValidationMessageFor(model => list[pos].NumKids, "", new { @class = "text-danger" })
                            </p>
                            <p>
                                @Html.LabelFor(model => list[pos].AgeRange, htmlAttributes: new { @class = "container-label" })
                                @Html.EditorFor(model => list[pos].AgeRange, new { htmlAttributes = new { @class = "" } })
                                @Html.ValidationMessageFor(model => list[pos].AgeRange, "", new { @class = "text-danger" })
                            </p>
                        </div>
                        <Label class="container-header">DATE</Label>
                        <hr />
                        <div class="container-block">
                            <p>
                                @Html.LabelFor(model => list[pos].StartDate, htmlAttributes: new { @class = "container-label" })
                                @Html.EditorFor(model => list[pos].StartDate, new { htmlAttributes = new { @class = "" } })
                                @Html.ValidationMessageFor(model => list[pos].StartDate, "", new { @class = "text-danger" })

                            </p>
                            <p>
                                @Html.LabelFor(model => list[pos].EndDate, htmlAttributes: new { @class = "container-label" })
                                @Html.EditorFor(model => list[pos].EndDate, new { htmlAttributes = new { @class = "" } })
                                @Html.ValidationMessageFor(model => list[pos].EndDate, "", new { @class = "text-danger" })
                            </p>
                            <p>

                                @Html.LabelFor(model => list[pos].StartTime, htmlAttributes: new { @class = "container-label" })
                                @Html.EditorFor(model => list[pos].StartTime, new { htmlAttributes = new { @class = "" } })
                                @Html.ValidationMessageFor(model => list[pos].StartTime, "", new { @class = "text-danger" })

                            </p>
                            <p>
                                @Html.LabelFor(model => list[pos].EndTime, htmlAttributes: new { @class = "container-label" })
                                @Html.EditorFor(model => list[pos].EndTime, new { htmlAttributes = new { @class = "" } })
                                @Html.ValidationMessageFor(model => list[pos].EndTime, "", new { @class = "text-danger" })
                            </p>
                        </div>
                        <Label class="container-header">LOCATION</Label>
                        <hr />
                        <div class="container-block">
                            <p>

                                @Html.LabelFor(model => list[pos].Street, htmlAttributes: new { @class = "container-label" })
                                @Html.EditorFor(model => list[pos].Street, new { htmlAttributes = new { @class = "" } })
                                @Html.ValidationMessageFor(model => list[pos].Street, "", new { @class = "text-danger" })

                            </p>
                            <p>
                                @Html.LabelFor(model => list[pos].City, htmlAttributes: new { @class = "container-label" })
                                @Html.EditorFor(model => list[pos].City, new { htmlAttributes = new { @class = "" } })
                                @Html.ValidationMessageFor(model => list[pos].City, "", new { @class = "text-danger" })
                            </p>
                        </div>
                        <Label class="container-header">SPECIFICATION</Label>
                        <hr />
                        <div class="container-block">
                            <p>

                                @Html.LabelFor(model => list[pos].Specification, htmlAttributes: new { @class = "container-label" })
                                @Html.EditorFor(model => list[pos].Specification, new { htmlAttributes = new { @class = "" } })
                                @Html.ValidationMessageFor(model => list[pos].Specification, "", new { @class = "text-danger" })

                            </p>

                        </div>
                        <div class="container-block">
                            <p class="create-advert-buttons">
                                <input type="submit" class="create-advert-button action-button" value="Update Advert" title="Update Advert" />
                                <input type="button" class="create-advert-button normal-button" value="Cancel" title="Cancel" />

                            </p>
                        </div>
                    }

                </div>

            </div>
        </div>
        }
</div>
