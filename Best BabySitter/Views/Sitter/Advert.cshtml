@model IEnumerable<Best_BabySitter.Models.Advert>

@{
    ViewBag.Title = "Advert";
    Layout = "~/Views/Shared/_SitterLayout.cshtml";
}

@if (TempData["alertMessage"] != null)
{
    <div class="alert alert-success alert-dismissible">
        <a href="#" class="close" data-dismiss="alert" aria-label="close">&times;</a>
        <strong><i class="fa fa-exclamation-triangle" aria-hidden="true"></i> @TempData["alertMessage"].ToString().</strong>
    </div>
    TempData["alertMessage"] = null;
}
else if (TempData["errorMessage"] != null)
{
    <div class="alert alert-danger alert-dismissible">
        <a href="#" class="close" data-dismiss="alert" aria-label="close">&times;</a>
        <strong><i class="fa fa-exclamation-triangle" aria-hidden="true"></i> @TempData["errorMessage"].ToString().</strong>
    </div>
    TempData["errorMessage"] = null;
};


<div class="manage-adverts-container" style="display:flex">
    @{
        int pos = 0;
        <div class="manage-adverts-container-item open-advert-board">
            <h4>OPEN ADVERTS</h4>
            <div class=" dashboard-event-adverts">
                @{
                    int count = 0;
                    foreach (var ad in Model)
                    {
                        <div class="event-advert" onclick="changeAdvertforSitter(@count)">
                            <Label class="advert-id">#AD|@ad.ID</Label>
                            <Label class="advert-date">@String.Format("{0:MM/dd/yyyy}", ad.StartDate)</Label><br />
                            <Label class="advert-time">@String.Format("{0:HH:mm}", ad.StartTime)- @String.Format("{0:HH:mm}", ad.EndTime)</Label>
                            <div class="advert-info">
                                <span class=" advert-icon fa fa-calendar-alt"></span>
                                <Label>@ad.Street , @ad.City</Label>
                            </div>
                        </div>
                        count++;
                    }
                }


            </div>
        </div>
        <div class="loader-container"></div>
        <div class="manage-adverts-container-item manage-advert-board">
            <div class="manage-advert">
                <p class="manage-advert-btn">
                    <a class="manage-advert-nav edit-advert-btn">
                        ADVERT
                    </a>
                </p>

                <div class="edit-advert-container" style="overflow-y: auto; max-height: 69vh; ">
                    <hr />
                    @using (Html.BeginForm())
                    {

                        @Html.AntiForgeryToken()
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                        <Label class="container-header">INFORMATION</Label>
                        <hr />
                        <div class="container-block">
                            <p>
                                @Html.LabelFor(model => Model.ToArray()[pos].NumKids , htmlAttributes: new { @class = "container-label" })
                                <input type="number" class="cur-ad-num-kids" min="1" max="20" readonly/>
                                @Html.ValidationMessageFor(model => Model.ToArray()[pos].NumKids, "", new { @class = "text-danger" })
                            </p>
                            <p>
                                @Html.LabelFor(model => Model.ToArray()[pos].AgeRange, htmlAttributes: new { @class = "container-label" })
                                <input type="text" class="cur-ad-age-range" value="" placeholder="Enter age range e.g 8-12 years" readonly/>
                                @Html.ValidationMessageFor(model => Model.ToArray()[pos].AgeRange, "", new { @class = "text-danger" })
                            </p>
                        </div>
                        <Label class="container-header">DATE</Label>
                        <hr />
                        <div class="container-block">
                            <p>
                                @Html.LabelFor(model => Model.ToArray()[pos].StartDate, htmlAttributes: new { @class = "container-label" })

                                <input type="date" class="cur-ad-start-date advert-start-date" value="" readonly/>
                                @Html.ValidationMessageFor(model => Model.ToArray()[pos].StartDate, "", new { @class = "text-danger" })

                            </p>
                            <p>
                                @Html.LabelFor(model => Model.ToArray()[pos].EndDate, htmlAttributes: new { @class = "container-label" })
                                <input type="date" class="cur-ad-end-date advert-end-date" value="" readonly/>
                                @Html.ValidationMessageFor(model => Model.ToArray()[pos].EndDate, "", new { @class = "text-danger" })
                            </p>
                            <p>

                                @Html.LabelFor(model => Model.ToArray()[pos].StartTime, htmlAttributes: new { @class = "container-label" })
                                <input type="time" class="cur-ad-start-time " value="" readonly/>
                                @Html.ValidationMessageFor(model => Model.ToArray()[pos].StartTime, "", new { @class = "text-danger" })

                            </p>
                            <p>
                                @Html.LabelFor(model => Model.ToArray()[pos].EndTime, htmlAttributes: new { @class = "container-label" })
                                <input type="time" class="cur-ad-end-time" value="" readonly/>
                                @Html.ValidationMessageFor(model => Model.ToArray()[pos].EndTime, "", new { @class = "text-danger" })
                            </p>
                        </div>
                        <Label class="container-header">LOCATION</Label>
                        <hr />
                        <div class="container-block">
                            <p>

                                @Html.LabelFor(model => Model.ToArray()[pos].Street, htmlAttributes: new { @class = "container-label" })
                                <input type="text" class="cur-ad-street" value="" readonly/>
                                @Html.ValidationMessageFor(model => Model.ToArray()[pos].Street, "", new { @class = "text-danger" })

                            </p>
                            <p>
                                @Html.LabelFor(model => Model.ToArray()[pos].City, htmlAttributes: new { @class = "container-label" })
                                <input type="text" class="cur-ad-city" value="" readonly/>
                                @Html.ValidationMessageFor(model => Model.ToArray()[pos].City, "", new { @class = "text-danger" })
                            </p>
                        </div>
                        <Label class="container-header">SPECIFICATION</Label>
                        <hr />
                        <div class="container-block">
                            <p>

                                @Html.LabelFor(model => Model.ToArray()[pos].Specification, htmlAttributes: new { @class = "container-label" })
                                <textarea class="cur-ad-specif" readonly>

                                </textarea>
                                @Html.ValidationMessageFor(model => Model.ToArray()[pos].Specification, "", new { @class = "text-danger" })

                            </p>

                        </div>
                        <div class="container-block">
                            <p class="create-advert-buttons">
                                <input type="submit" class="action-button " value="Apply for Job" title="Apply for Job" />
                            </p>
                        </div>
                    }

                </div>
            </div>
        </div>
    }

</div>

